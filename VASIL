# Main workflow of VASIL


report: "report/workflow.rst"


rule all:
    input:
        "results/Daily_SpikeGroups_Freq.csv",
        "results/SpikeGroups.pck",
        "results/Mutation_Profiles.pck",
        "results/Cross_react_dic_spikegroups.pck",
        "results/Cross_with_delta_validation.pck",
        "results/Immunological_Landscape/simulation_status.csv",


rule get_mutation_and_spikegroups:
    input:
        covsonar=config["covsonardata"],
    params:
        prefix=config["prefix"],
        mutation_threshold=config["mutation_threshold"],
    output:
        dir=directory("results/mutation_data"),
        spk_profiles="results/mutation_data/mutationprofile_RBD_NTD_mutations.csv",
        spike_groups="results/mutation_data/mutationprofile_RBD_NTD_pseudogroups.csv",
    shell:
        "Rscript {workflow.basedir}/scripts/mutationprofile/mutation_profile.R {input.covsonar} {output.dir} {params.prefix} {params.mutation_threshold}"


rule get_lineages_frequencies:
    input:
        cases=config["cases"],
        covsonar=config["covsonardata"],
    params:
        date_start=config["date_start"],
    output:
        result="results/Daily_Lineages_Freq.csv",
    shell:
        "python {workflow.basedir}/scripts/SpikeGroups_frequencies/Lineages_freqs.py {input.cases} {input.covsonar} {params.date_start} {output.result}"


rule get_spikegroups_frequencies:
    input:
        lins_freqs="results/Daily_Lineages_Freq.csv",
        spk_profiles="results/mutation_data/mutationprofile_RBD_NTD_mutations.csv",
        spike_groups="results/mutation_data/mutationprofile_RBD_NTD_pseudogroups.csv",
    output:
        spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
        spikes_dic="results/SpikeGroups.pck",
        mutations_dic="results/Mutation_Profiles.pck",
    shell:
        "python {workflow.basedir}/scripts/SpikeGroups_frequencies/SpikeGroups_freqs.py {input.lins_freqs} {input.spk_profiles} {input.spike_groups} {output.spikes_freqs} {output.spikes_dic} {output.mutations_dic}"


rule get_cross_neutralization:
    input:
        spikes_dic="results/SpikeGroups.pck",
        mutations_dic="results/Mutation_Profiles.pck",
        Escape_data=config["escape_data"],
    params:
        lineage_focus=config["lineage_focus"],
        mutation_focus=config["mutation_focus"],
    output:
        cross_delta="results/Cross_with_delta_validation.pck",
        cross_spk="results/Cross_react_dic_spikegroups.pck",
    shell:
        "python {workflow.basedir}/scripts/Cross_neutralization/Compute_FR.py {input.spikes_dic} {input.mutations_dic} {input.Escape_data} {params.lineage_focus} {params.mutation_focus} {output.cross_delta} {output.cross_spk}"


rule get_Immunological_Landscape:
    input:
        cases=config["cases"],
        cross_delta="results/Cross_with_delta_validation.pck",
        cross_spk="results/Cross_react_dic_spikegroups.pck",
        spikes_dic="results/SpikeGroups.pck",
        spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
        Escape_data=config["escape_data"],
        VE_delta=config["VE_delta"],
    params:
        total_pop=config["total_population"],
        date_start=config["date_start"],
        date_end=config["date_end"],
        lineage_focus=config["lineage_focus"],
    output:
        resultdir=directory("results/Immunological_Landscape"),
        results_done="results/Immunological_Landscape/simulation_status.csv",
    shell:
        "python {workflow.basedir}/scripts/Expected_immunized/Expected_immunized.py {input.cases} {input.cross_delta} {input.cross_spk} {input.spikes_dic} {input.spikes_freqs} {input.Escape_data} {input.VE_delta} {params.total_pop} {params.date_start} {params.date_end} {params.lineage_focus} {output.resultdir}"
