# Workflow of VASIL figure plotting


report: "report/workflow.rst"
import os

rule_all_common = [
    "results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
    "plots/absolute/absolute_estimate.pdf",
    "plots/absolute/absolute_estimate.svg",
    "plots/Spikes_Props/SpikeGroups_Props_overview.pdf",
]
if config["FR_DMS_sites"]:
    rule_all_common.append("plots/FR_sites/foldresistance_DMS_sites_epitopes.pdf")
    rule_all_common.append("plots/FR_sites_weighted/foldresistance_DMS_sites_epitopes_weighted.pdf")

if config["cross_spk"]:
    rule_all_common.append("plots/Cross_spikegroups/Cross_React_AB_A.pdf")

if config["cross_major"]:
    rule_all_common.append("plots/Cross_Major/major_Cross_React_AB_A.pdf")

if config["all_fit"]:
    rule_all_common.append("plots/relative_all/plot_status_all.csv")

if config["fit_lineage_focus"]:
    rule_all_common.append("plots/relative/plot_status.csv"),

if config["p_neut"]:
    rule_all_common.append("plots/P_neut_PK_lineage_focus/plot_status.csv"),

if config["plot_groups"]:
    rule_all_common.append("plots/relative_groups/As_Lineages/plot_status.csv"),
    rule_all_common.append("plots/relative_groups/As_Spikegroups/plot_status.csv"),
    if "Germany" in config["cases"] and os.path.exists("Stichprobe_RKI-Jul2021_to_9thAug2023_KW.tsv"):
        rule_all_common.append("plots/relative_groups_Germany/As_Spikegroups/plot_status.csv")
    else:
        print("For Germany, covsonar file named path/to/working_directory/Stichprobe_RKI-Jul2021_to_9thAug2023_KW.tsv is required to reproduce Fig 3B (or copy and rename your covsonar file)")
                
if config["p_neut_groups"]:
    rule_all_common.append("plots/P_neut_PK_groups/plot_status.csv"),


rule all:
    input:
        rule_all_common,


rule get_spike_props_overview:
    input:
        spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
    output:
        res_dir=directory("plots/Spikes_Props"),
        res="plots/Spikes_Props/SpikeGroups_Props_overview.pdf",
    shell:
        "python {workflow.basedir}/scripts/plotting/Dominant_Spikes.py {input.spikes_freqs} {output.res_dir}"
        

import os
try:
    os.remove("results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv")
except:
    pass

rule get_susceptible_weighted_mean:
    input:
        spikes_dic="results/SpikeGroups.pck",
        spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
    params:
        threshold=config["weight_prop"],
        total_pop=config["total_population"],
        res_dir="results",
    output:
        mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
    shell:
        "python {workflow.basedir}/scripts/plotting/Susceptible_weighted_mean.py {input.spikes_dic} {input.spikes_freqs} {params.threshold} {params.total_pop} {params.res_dir}"


rule get_absolute_advantage:
    input:
        cases=config["cases"],
        mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
    params:
        color=config["color"],
        time_start=config["time_start"],
        time_stop=config["time_stop"],
        cases_col=config["cases_column"],
    output:
        res_dir=directory("plots/absolute"),
        res1="plots/absolute/absolute_estimate.pdf",
        res2="plots/absolute/absolute_estimate.svg",
    shell:
        "python {workflow.basedir}/scripts/plotting/absolute_estimation.py {input.cases} {input.mean_trend} {params.color} {output.res_dir} {params.time_start} {params.time_stop} {params.cases_col}"


if config["fit_lineage_focus"]:

    rule get_relative_advantage:
        input:
            ES_lin=config["S_linfocus"],
            spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
            mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
        params:
            threshold=config["weight_prop"],
            lineage_focus=config["lineage_focus"],
            time_start=config["time_start"],
            time_stop=config["time_stop"],
        output:
            res_dir=directory("plots/relative"),
            res="plots/relative/plot_status.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/relative_advantage.py {input.ES_lin} {input.spikes_freqs} {params.threshold} {params.lineage_focus} {input.mean_trend} {output.res_dir} {params.time_start} {params.time_stop}"


if config["p_neut"]:

    rule plot_pneut:
        input:
            pneut_file=config["p_neut_file"],
            pk_file=config["pk_file"],
        params:
            lin_name=config["lineage_focus"],
            col_pneut=config["color_pneut"],
            antigen=config["antigen"],
        output:
            res_dir=directory("plots/P_neut_PK_lineage_focus/"),
            res="plots/P_neut_PK_lineage_focus/plot_status.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/P_neut.py {input.pk_file} {input.pneut_file} {params.col_pneut} {params.lin_name} {output.res_dir} {params.antigen}"


if config["plot_groups"]:

    rule get_relative_lineages:
        input:
            ES_lin_dir=config["S_groups"],
            spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
            mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
        params:
            threshold=config["weight_prop"],
            lineage_focus=config["compare_groups"],
            time_start=config["time_start"],
            time_stop=config["time_stop"],
            col_groups=config["color_groups"],
            len_groups=len(config["compare_groups"]),
        output:
            res_dir=directory("plots/relative_groups/As_Lineages"),
            res="plots/relative_groups/As_Lineages/plot_status.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/relative_advantage_lineages.py {input.ES_lin_dir} {input.mean_trend} {input.spikes_freqs} {params.threshold} {params.time_start} {params.time_stop} {params.len_groups} {output.res_dir} {params.lineage_focus} {params.col_groups}"
    
    rule get_relative_spikegroups:
        input:
            ES_lin_dir=config["S_groups"],
            spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
            mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
        params:
            threshold=config["weight_prop"],
            lineage_focus=config["compare_groups"],
            time_start=config["time_start"],
            time_stop=config["time_stop"],
            col_groups=config["color_groups"],
            len_groups=len(config["compare_groups"]),
        output:
            res_dir=directory("plots/relative_groups/As_Spikegroups"),
            res="plots/relative_groups/As_Spikegroups/plot_status.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/relative_advantage_spikegroups.py {input.ES_lin_dir} {input.mean_trend} {input.spikes_freqs} {params.threshold} {params.time_start} {params.time_stop} {params.len_groups} {output.res_dir} {params.lineage_focus} {params.col_groups}"
	
    if "Germany" in config["cases"] and os.path.exists("Stichprobe_RKI-Jul2021_to_9thAug2023_KW.tsv"):
        rule get_relative_spikegroups_germany_special:
            input:
                ES_lin_dir=config["S_groups"],
                spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
                mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
            params:
                threshold=config["weight_prop"],
                lineage_focus=config["compare_groups"],
                time_start=config["time_start"],
                time_stop=config["time_stop"],
                col_groups=config["color_groups"],
                len_groups=len(config["compare_groups"]),
            output:
                res_dir=directory("plots/relative_groups_Germany/As_Spikegroups"),
                res="plots/relative_groups_Germany/As_Spikegroups/plot_status.csv",
            shell:
                "python {workflow.basedir}/scripts/plotting/relative_advantage_spikegroups_germany_special.py {input.ES_lin_dir} {input.mean_trend} {input.spikes_freqs} {params.threshold} {params.time_start} {params.time_stop} {params.len_groups} {output.res_dir} {params.lineage_focus} {params.col_groups}"
	    

if config["p_neut_groups"]:

    rule plot_pneut_groups:
        input:
            pneut_dir=config["p_neut_dir"],
            pk_file=config["pk_file"],
        params:
            lin_name=config["compare_groups"],
            col_pneut=config["color_groups"],
            len_groups=len(config["compare_groups"]),
            antigen=config["antigen_groups"],
        output:
            res_dir=directory("plots/P_neut_PK_groups/"),
            res="plots/P_neut_PK_groups/plot_status.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/P_neut_groups.py {input.pk_file} {input.pneut_dir} {output.res_dir} {params.len_groups} {params.lin_name} {params.col_pneut} {params.antigen}"


if config["all_fit"]:

    rule get_relative_advantage_all:
        input:
            ES_lin=config["S_ALL"],
            spikes_freqs="results/Daily_SpikeGroups_Freq.csv",
            mean_trend="results/Susceptible_weighted_mean_over_spikegroups_all_PK.csv",
        params:
            threshold=config["weight_prop"],
            lineage_focus="ALL",
            time_start=config["time_start"],
            time_stop=config["time_stop"],
        output:
            res_dir=directory("plots/relative_all/"),
            res="plots/relative_all/plot_status_all.csv",
        shell:
            "python {workflow.basedir}/scripts/plotting/relative_advantage.py {input.ES_lin} {input.spikes_freqs} {params.threshold} {params.lineage_focus} {input.mean_trend} {output.res_dir} {params.time_start} {params.time_stop}"


if config["FR_DMS_sites"]:

    rule plot_FR_sites:
        input:
            FR_sites="results/Fold_Resistance_DMS_Sites_Epitopes.csv",
        output:
            res_dir=directory("plots/FR_sites"),
            res="plots/FR_sites/foldresistance_DMS_sites_epitopes.pdf",
        shell:
            "Rscript {workflow.basedir}/scripts/plotting/FR_sites_landscape.R {input.FR_sites} {output.res_dir}"

    rule plot_FR_sites_wght:
        input:
           FR_sites="results/Fold_Resistance_DMS_Sites_Epitopes_weighted.csv",
        output:
            res_dir=directory("plots/FR_sites_weighted"),
            res="plots/FR_sites_weighted/foldresistance_DMS_sites_epitopes_weighted.pdf",
        shell:
            "Rscript {workflow.basedir}/scripts/plotting/FR_sites_landscape_weighted.R {input.FR_sites} {output.res_dir}"

if config["cross_spk"]:
    if config["added_cross"]:

        rule plot_cross_spk:
            input:
                cross_spk="results/Cross_react_dic_spikegroups_ALL.pck",
                cross_lin=config["Cross_Lin_file"],
            params:
                lin_name=config["added_lineage"],
                plot_major="False",
            output:
                res_dir=directory("plots/Cross_spikegroups"),
                res="plots/Cross_spikegroups/Cross_React_AB_A.pdf",
            shell:
                "python {workflow.basedir}/scripts/plotting/Cross_maps.py {input.cross_spk} {params.lin_name} {input.cross_lin} {output.res_dir} {params.plot_major}"

    else:

        rule plot_cross_spk:
            input:
                cross_spk="results/Cross_react_dic_spikegroups_ALL.pck",
            params:
                cross_lin="None",
                lin_name="None",
                plot_major="False",
            output:
                res_dir=directory("plots/Cross_spikegroups"),
                res="plots/Cross_spikegroups/Cross_React_AB_A.pdf",
            shell:
                "python {workflow.basedir}/scripts/plotting/Cross_maps.py {input.cross_spk} {params.lin_name} {params.cross_lin} {output.res_dir} {params.plot_major}"


if config["cross_major"]:
    if config["added_cross"]:

        rule plot_cross_major:
            input:
                cross_spk=config["cross_major_file"],
            params:
                cross_lin="None",
                lin_name=config["added_lineage"],
                add_lin="add",
                plot_major="True",
            output:
                res_dir=directory("plots/Cross_Major"),
                res="plots/Cross_Major/major_Cross_React_AB_A.pdf",
            shell:
                "python {workflow.basedir}/scripts/plotting/Cross_maps.py {input.cross_spk} {params.lin_name} {params.cross_lin} {output.res_dir} {params.plot_major} {params.add_lin}"

    else:

        rule plot_cross_major:
            input:
                cross_spk=config["cross_major_file"],
            params:
                cross_lin="None",
                lin_name=config["added_lineage"],
                plot_major="True",
                not_add="not_add",
            output:
                res_dir=directory("plots/Cross_Major"),
                res="plots/Cross_Major/major_Cross_React_AB_A.pdf",
            shell:
                "python {workflow.basedir}/scripts/plotting/Cross_maps.py {input.cross_spk} {params.lin_name} {params.cross_lin} {output.res_dir} {params.plot_major} {params.not_add}"
